commit e73b8e6423b9a02753b2581491d70197ba28b0e7
Author: Anderson Toshiyuki Sasaki <ansasaki@redhat.com>
Date:   Wed May 8 14:13:47 2024 +0200

    Fix 'unnecessary qualification' warnings
    
    Newer versions of the rust compiler generates warnings when symbols are
    over-specified.
    
    Signed-off-by: Anderson Toshiyuki Sasaki <ansasaki@redhat.com>
    
    extra patch1

diff --git a/keylime-agent/src/crypto.rs b/keylime-agent/src/crypto.rs
index cf5b5a6..184ab82 100644
--- a/keylime-agent/src/crypto.rs
+++ b/keylime-agent/src/crypto.rs
@@ -95,7 +95,7 @@ pub(crate) fn write_key_pair(
                 _ = file.write(&key.private_key_to_pem_pkcs8()?)?;
             } else {
                 _ = file.write(&key.private_key_to_pem_pkcs8_passphrase(
-                    openssl::symm::Cipher::aes_256_cbc(),
+                    Cipher::aes_256_cbc(),
                     pw.as_bytes(),
                 )?)?;
             }
diff --git a/keylime-agent/src/payloads.rs b/keylime-agent/src/payloads.rs
index e190e3a..fc58c43 100644
--- a/keylime-agent/src/payloads.rs
+++ b/keylime-agent/src/payloads.rs
@@ -221,7 +221,7 @@ async fn run_encrypted_payload(
     let action_file = unzipped.join("action_list");
 
     if action_file.exists() {
-        let action_data = std::fs::read_to_string(&action_file)
+        let action_data = fs::read_to_string(&action_file)
             .expect("unable to read action_list");
 
         action_data
diff --git a/keylime-agent/src/revocation.rs b/keylime-agent/src/revocation.rs
index 37a7d08..e0f28a9 100644
--- a/keylime-agent/src/revocation.rs
+++ b/keylime-agent/src/revocation.rs
@@ -206,7 +206,7 @@ fn run_revocation_actions(
     let action_file = unzipped.join("action_list");
 
     if action_file.exists() {
-        action_data = std::fs::read_to_string(&action_file)
+        action_data = fs::read_to_string(&action_file)
             .expect("unable to read action_list");
 
         let file_actions = action_data
@@ -535,7 +535,7 @@ mod tests {
             env!("CARGO_MANIFEST_DIR"),
             "/tests/unzipped/test_ok.json"
         );
-        let json_str = std::fs::read_to_string(json_file).unwrap(); //#[allow_ci]
+        let json_str = fs::read_to_string(json_file).unwrap(); //#[allow_ci]
         let json = serde_json::from_str(&json_str).unwrap(); //#[allow_ci]
         let actions_dir =
             &Path::new(env!("CARGO_MANIFEST_DIR")).join("tests/actions/");
@@ -574,7 +574,7 @@ mod tests {
             env!("CARGO_MANIFEST_DIR"),
             "/tests/unzipped/test_err.json"
         );
-        let json_str = std::fs::read_to_string(json_file).unwrap(); //#[allow_ci]
+        let json_str = fs::read_to_string(json_file).unwrap(); //#[allow_ci]
         let json = serde_json::from_str(&json_str).unwrap(); //#[allow_ci]
         let actions_dir =
             &Path::new(env!("CARGO_MANIFEST_DIR")).join("tests/actions/");
@@ -609,7 +609,7 @@ mod tests {
                 let revocation_actions = "local_action_stand_alone.py, local_action_rev_script1.py";
             }
         }
-        let json_str = std::fs::read_to_string(json_file).unwrap(); //#[allow_ci]
+        let json_str = fs::read_to_string(json_file).unwrap(); //#[allow_ci]
         let json = serde_json::from_str(&json_str).unwrap(); //#[allow_ci]
         let actions_dir =
             &Path::new(env!("CARGO_MANIFEST_DIR")).join("tests/actions/");
