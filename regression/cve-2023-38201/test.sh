#!/bin/bash
# vim: dict+=/usr/share/beakerlib/dictionary.vim cpt=.,w,b,u,t,i,k
. /usr/share/beakerlib/beakerlib.sh || exit 1

AGENT_ID="d432fbb3-d2f1-4a97-9ef7-75bd81c00000"
MY_IP=127.0.0.1
HOSTNAME=$( hostname )

rlJournalStart

    rlPhaseStartSetup "Do the keylime setup"
        rlRun 'rlImport "./test-helpers"' || rlDie "cannot import keylime-tests/test-helpers library"
        rlRun 'rlImport "certgen/certgen"' || rlDie "cannot import openssl/certgen library"
        rlAssertRpm keylime

        # Create temporary directory
        rlRun "TmpDir=\$(mktemp -d)" 0 "Creating tmp directory"
        rlRun "pushd $TmpDir"

        # update /etc/keylime.conf
        limeBackupConfig
        rlRun "limeUpdateConf logger_root level DEBUG"
        rlRun "limeUpdateConf logger_keylime level DEBUG"
        rlRun "limeUpdateConf handler_consoleHandler level DEBUG"
        # verifier
        rlRun "limeUpdateConf revocations enabled_revocation_notifications '[]'"
        # tenant
        rlRun "limeUpdateConf tenant require_ek_cert False"
        # agent
        rlRun "limeUpdateConf agent enable_revocation_notifications false"
        # if TPM emulator is present
        if limeTPMEmulated; then
            # start tpm emulator
            rlRun "limeStartTPMEmulator"
            rlRun "limeWaitForTPMEmulator"
            rlRun "limeCondStartAbrmd"
            # start ima emulator
            rlRun "limeInstallIMAConfig"
            rlRun "limeStartIMAEmulator"
        fi
        sleep 5
        # start keylime_verifier
        rlRun "limeStartVerifier"
        rlRun "limeWaitForVerifier"
        rlRun "limeStartRegistrar"
        rlRun "limeWaitForRegistrar"
    rlPhaseEnd

    rlPhaseStartTest "Prepare certificates"
        rlRun "x509KeyGen ca" 0 "Generating Root CA RSA key pair"
        rlRun "x509KeyGen agent" 0 "Generating fake agent RSA key pair"
        rlRun "x509SelfSign ca" 0 "Selfsigning Root CA certificate"
        rlRun "x509CertSign --CA ca --DN 'CN = ${HOSTNAME}' -t webserver --subjectAltName 'IP = ${MY_IP}' agent" 0 "Signing fake agent certificate with CA key"

        # Get EK certificate and encode in base 64
        rlRun "tpm2_getekcertificate | base64 -w0 > ek.b64"

        # Generate AK and encode in base 64
        rlRun "tpm2_createek -c ek.handle -G rsa -u ek.pub"
        rlRun "tpm2_createak -C ek.handle -c ak.ctx -u ak.pub -n ak.name"
        rlRun "cat ak.pub | base64 -w0 > ak.b64"
    rlPhaseEnd

    rlPhaseStartTest "Register fake agent"
        # Get the certificate in PEM format and remove newlines
        rlRun "openssl x509 -in $(x509Cert agent) -outform PEM | sed -z 's/\n//g' > mtls_cert.pem"

        # Request fake agent registration
        rlRun "curl -X POST http://127.0.0.1:8890/v2.1/agents/$AGENT_ID -H 'Content-Type: application/json' \
                   -d '{ \
                         \"ekcert\": \"$(cat ek.b64)\", \
                         \"aik_tpm\": \"$(cat ak.b64)\", \
                         \"mtls_cert\": \"$(cat mtls_cert.pem)\", \
                         \"ip\": \"127.0.0.1\", \
                         \"port\": \"9002\" \
                       }' | jq > registration.json"
        sleep 1

        # Request fake agent activation using random value as the auth tag
        rlRun "curl -X PUT http://127.0.0.1:8890/v2.1/agents/$AGENT_ID/activate -H 'Content-Type: application/json' \
                   -d '{ \
                         \"auth_tag\": \"$(openssl rand -hex 48)\" \
                       }' | jq > random_activation.json"
        rlAssertNotGrep "'does not match expected value .*'" random_activation.json

        # Try activating with the correct auth tag
        rlRun "cat random_activation.json | jq '.status' | grep -o 'does not match expected value .*' | sed -z 's/does not match expected value \([^\"]*\)\".*/\1/g' > auth_tag"
        rlRun -s "curl -X PUT http://127.0.0.1:8890/v2.1/agents/$AGENT_ID/activate -H 'Content-Type: application/json' \
                   -d '{ \
                         \"auth_tag\": \"$(cat auth_tag)\" \
                       }'"
        rlAssertNotGrep "\"code\": 200, \"status\": \"Success\""  $rlRun_LOG -E

        # Check that agent was deleted from the registrar database
        rlRun -s "keylime_tenant -c reglist"
        rlAssertNotGrep "{\"code\": 200, \"status\": \"Success\", \"results\": {\"uuids\":.*\"$AGENT_ID\"" $rlRun_LOG -E

    rlPhaseEnd

    rlPhaseStartTest "Start real agent and verify that it correctly registers"
        rlRun "limeStartAgent"
        rlRun "limeWaitForAgentRegistration ${AGENT_ID}"
    rlPhaseEnd

    rlPhaseStartCleanup "Do the keylime cleanup"
        rlRun "limeStopAgent"
        rlRun "limeStopRegistrar"
        rlRun "limeStopVerifier"
        if limeTPMEmulated; then
            rlRun "limeStopIMAEmulator"
            rlRun "limeStopTPMEmulator"
            rlRun "limeCondStopAbrmd"
        fi
        limeSubmitCommonLogs
        limeClearData
        limeRestoreConfig
        rlRun "popd"
        rlRun "rm -r $TmpDir" 0 "Removing tmp directory"
    rlPhaseEnd

rlJournalEnd
