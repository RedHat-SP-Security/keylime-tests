#!/bin/bash
# vim: dict+=/usr/share/beakerlib/dictionary.vim cpt=.,w,b,u,t,i,k
. /usr/share/beakerlib/beakerlib.sh || exit 1

AGENT_ID="d432fbb3-d2f1-4a97-9ef7-75bd81c00000"

rlJournalStart

    rlPhaseStartSetup "Do the keylime setup"
        rlRun 'rlImport "./test-helpers"' || rlDie "cannot import keylime-tests/test-helpers library"
        rlAssertRpm keylime
        
        # clean previous durable attestion artifacts stored on filesystem
        rlRun "rm -rf /var/lib/keylime/da/CI_*"

        # update /etc/keylime.conf
        limeBackupConfig
        rlRun "limeUpdateConf logger_root level INFO"        

        # disable the need for ek cert for tenant
        rlRun "limeUpdateConf tenant require_ek_cert False"

        # update registrar.conf to load the "flat file" backend for durable attestation
        rlRun "limeUpdateConf registrar durable_attestation_import keylime.da.examples.file"
        rlRun "limeUpdateConf registrar persistent_store_url file:///var/lib/keylime/da?prefix=CI"
        
        # update verifier.conf to load the "flat file" backend for durable attestation
        rlRun "limeUpdateConf verifier durable_attestation_import keylime.da.examples.file"
        rlRun "limeUpdateConf verifier persistent_store_url file:///var/lib/keylime/da?prefix=CI"

        # if TPM emulator is present
        if limeTPMEmulated; then
            # start tpm emulator
            rlRun "limeStartTPMEmulator"
            rlRun "limeWaitForTPMEmulator"
            rlRun "limeCondStartAbrmd"
            # start ima emulator
            rlRun "limeInstallIMAConfig"
            rlRun "limeStartIMAEmulator"
        fi

        # start keylime_verifier
        rlRun "limeStartVerifier"
        rlRun "limeWaitForVerifier"
        rlRun "limeStartRegistrar"
        rlRun "limeWaitForRegistrar"
        rlRun "limeStartAgent"
        rlRun "limeWaitForAgentRegistration ${AGENT_ID}"

        # create allowlist and excludelist
	TESTDIR=$(limeCreateTestDir)
        limeCreateTestPolicy
    rlPhaseEnd

    rlPhaseStartTest "Add keylime agent with both measured boot and runtime policies"
        rlRun -s "keylime_tenant -v 127.0.0.1 -t 127.0.0.1 -u $AGENT_ID  -f /etc/hostname --runtime-policy policy.json -c add"
        rlRun "limeWaitForAgentStatus $AGENT_ID 'Get Quote'"
        rlRun -s "keylime_tenant -c cvlist"
        rlAssertGrep "{'code': 200, 'status': 'Success', 'results': {'uuids':.*'$AGENT_ID'" "$rlRun_LOG" -E
    rlPhaseEnd

    rlPhaseStartTest "Run keylime offline (durable) attestation - asssuming success"
        rlRun "limeStopAgent"
        rlRun "limeStopRegistrar"
        rlRun "limeStopVerifier"
        rlRun "keylime_attest"
        ATTESTATION_FILE="/var/lib/keylime/da/CI_attestation_$AGENT_ID.json"
        rlAssertExists "$ATTESTATION_FILE"
    rlPhaseEnd

    rlPhaseStartTest "Extract a single quote from offline attestation data file and perform attestation - asssuming success"
        rlRun "head -1 $ATTESTATION_FILE > single_quote"
        rlRun "cat single_quote > $ATTESTATION_FILE"
        rlRun "keylime_attest"
    rlPhaseEnd

    rlPhaseStartTest "Malform an extracted quote and perform attestation - asssuming failure"
        rlRun "./malform_attestation_record.py single_quote malformed_quote"
        rlRun "cat malformed_quote > $ATTESTATION_FILE"
        rlRun -s "keylime_attest" 1
        rlAssertGrep "ERROR - Error verifying quote" "$rlRun_LOG"
        rlAssertGrep "(raise InvalidSignature|cryptography.exceptions.InvalidSignature)" "$rlRun_LOG" -E
        rlAssertGrep "The following agents failed attestation" "$rlRun_LOG"
    rlPhaseEnd

    rlPhaseStartCleanup "Do the keylime cleanup"
        if limeTPMEmulated; then
            rlRun "limeStopIMAEmulator"
            rlRun "limeStopTPMEmulator"
            rlRun "limeCondStopAbrmd"
        fi
        limeSubmitCommonLogs
        limeClearData
        limeRestoreConfig
        limeExtendNextExcludelist "$TESTDIR"
    rlPhaseEnd

rlJournalEnd
