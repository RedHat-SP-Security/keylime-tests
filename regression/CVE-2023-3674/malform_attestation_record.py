#!/usr/bin/python3

import base64
import json
import sys
import zlib

if len(sys.argv) != 3:
    print(f"""
        Usage: {sys.argv[0]} INPUT_QUOTE_FILE MALFORMED_QUOTE_FILE
        """)
    sys.exit(1)

infile = sys.argv[1]
outfile = sys.argv[2]
field_separator = b'--'

# read one line from the INPUT_QUOTE_FILE
# and separate timestamp from the data
with open(infile, 'rb') as f:
    line = f.readline()
    timestamp, b64_record = line.split(field_separator, 1)
# decode and parse JSON data
record = json.loads(base64.b64decode(b64_record))
quote = record['json_response']['results']['quote']
print(f'Quote:\n{quote}\n')
quoteblob, sigblob, pcrblob = quote.split(":", 2)
signature = base64.b64decode(sigblob)
print(f'Signature:\n{signature}\n')
# malform the signature, modify 11th byte
malformed_signature = signature[:10]
malformed_signature += b'\xab' if signature[10] != b'\xaa' else b'\xaa'
malformed_signature += signature[11:]
print(f'Malformed signature:\n{malformed_signature}\n')
# recreate the record
malformed_quote = ':'.join([quoteblob, base64.b64encode(malformed_signature).decode('utf-8') , pcrblob])
print(f'Malformed quote:\n{malformed_quote}\n')
record['json_response']['results']['quote'] = malformed_quote
b64_malformed_record = base64.b64encode(json.dumps(record).encode('utf-8'))
# store malformed record to the output file
with open(outfile, 'wb') as f:
    f.write(b''.join([timestamp, field_separator, b64_malformed_record]))
